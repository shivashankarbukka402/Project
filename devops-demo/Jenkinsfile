pipeline {
    agent any

    tools {
        maven 'Maven'      // Jenkins Maven installation name
        jdk 'Java11'       // Jenkins JDK installation name
    }

    environment {
        GIT_URL        = 'https://github.com/shivashankarbukka402/Project.git'
        GIT_BRANCH     = 'main'
        GIT_CREDENTIALS = 'shivashankarbukka402'
        IMAGE_TAG = 'latest'
        DOCKERFILE_BASE = 'Dockerfile'
        DOCKER_REGISTRY_CRED_ID = 'docker_token'
        DOCKER_USER    = 'shiva9828'
        DOCKER_IMAGE   = 'shiva9828/devops-demo'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${env.GIT_BRANCH}",
                    credentialsId: "${env.GIT_CREDENTIALS}",
                    url: "${env.GIT_URL}"
            }
        }

       stage('Build with Maven') {
           steps {
                dir('devops-demo') {   // go inside folder where pom.xml exists
                     sh 'mvn clean install -DskipTests'
                }
           }
      }

      stage('Docker Build') {
          steps {
               dir('devops-demo') {   // Dockerfile is also inside devops-demo
                   sh 'docker build -t ${DOCKER_USER}/${DOCKER_IMAGE}:latest .'
               }
          }
       }


        stage('Docker Push') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub-pass', variable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u ${DOCKER_USER} --password-stdin
                        docker push ${DOCKER_USER}/${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ubuntu@<EC2_PUBLIC_IP> "
                        docker pull ${DOCKER_USER}/${DOCKER_IMAGE}:latest &&
                        docker stop demo || true &&
                        docker rm demo || true &&
                        docker run -d --name demo -p 8080:8080 ${DOCKER_USER}/${DOCKER_IMAGE}:latest
                        "
                    '''
                }
            }
        }
    }
}

